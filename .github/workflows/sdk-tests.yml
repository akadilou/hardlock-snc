name: sdk-tests
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  macos_c_ffitest:
    name: macOS • C FFI round-trip
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - uses: taiki-e/install-action@v2
        with:
          tool: cbindgen
      - name: Build cdylib
        run: |
          cargo build -p hardlock-snc --release --locked
          ls -lh target/release
          test -f target/release/libhardlock_snc.dylib
      - name: Fix rpath and copy dylib
        run: |
          cp target/release/libhardlock_snc.dylib .
          install_name_tool -id "@executable_path/libhardlock_snc.dylib" libhardlock_snc.dylib
      - name: Round-trip C
        run: |
          cat > app.c <<'C'
          #include "hardlock_snc.h"
          #include <stdint.h>
          #include <stdio.h>
          #include <string.h>
          int main(void){
            uint8_t ct[4096]; size_t ct_len=sizeof(ct);
            uint8_t pt[4096]; size_t pt_len=sizeof(pt);
            const char* msg="hello";
            void* s=hl_snc_session_new_initiator();
            if(!s) return 10;
            if(hl_snc_encrypt(s,(const uint8_t*)msg,strlen(msg),ct,&ct_len)!=0) return 11;
            if(hl_snc_decrypt(s,ct,ct_len,pt,&pt_len)!=0) return 12;
            fwrite(pt,1,pt_len,stdout);
            hl_snc_session_free(s);
            return 0;
          }
          C
          clang app.c -o app -I . -L . -lhardlock_snc -Wl,-rpath,@executable_path
          o="$(./app | tr -d '\r')"
          echo "output=$o"
          [ "$o" = "hello" ]
      - uses: actions/upload-artifact@v4
        with:
          name: macos-ffi-artifacts
          path: |
            libhardlock_snc.dylib
            hardlock_snc.h

  android_ndk_so:
    name: Android • NDK r26d (API 24)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Install NDK manually
        run: |
          set -ex
          mkdir -p $HOME/android
          cd $HOME/android
          curl -sSL -o ndk.zip https://dl.google.com/android/repository/android-ndk-r26d-linux.zip
          unzip -q ndk.zip
          echo "ANDROID_NDK_HOME=$HOME/android/android-ndk-r26d" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$HOME/android/android-ndk-r26d" >> $GITHUB_ENV
      - name: Build .so
        run: |
          rustup target add aarch64-linux-android
          cargo install --locked cargo-ndk
          cargo ndk --platform 24 -t arm64-v8a -o target/android \
            build --manifest-path hardlock_snc/Cargo.toml --release
          ls -lh target/android/arm64-v8a/release
          test -f target/android/arm64-v8a/release/libhardlock_snc.so
      - uses: actions/upload-artifact@v4
        with:
          name: android-libs
          path: target/android/arm64-v8a/release/libhardlock_snc.so
